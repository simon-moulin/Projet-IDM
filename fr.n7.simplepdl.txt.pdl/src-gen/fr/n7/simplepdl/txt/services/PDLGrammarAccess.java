/*
 * generated by Xtext 2.26.0
 */
package fr.n7.simplepdl.txt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_3_0 = (RuleCall)cProcessElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Process : 'process' name=ID '{'
		//    processElements+=ProcessElement*
		//'}' ;
		@Override public ParserRule getRule() { return rule; }
		
		// 'process' name=ID '{'
		//    processElements+=ProcessElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processElements+=ProcessElement*
		public Assignment getProcessElementsAssignment_3() { return cProcessElementsAssignment_3; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_3_0() { return cProcessElementsProcessElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProcessElement : WorkDefinition | WorkSequence | Guidance | Resource;
		@Override public ParserRule getRule() { return rule; }
		
		//WorkDefinition | WorkSequence | Guidance | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_1() { return cWorkSequenceParserRuleCall_1; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_2() { return cGuidanceParserRuleCall_2; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_3() { return cResourceParserRuleCall_3; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNeedNeedParserRuleCall_3_0 = (RuleCall)cNeedAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WorkDefinition : 'wd' name=ID '{'
		//    (need+=Need)*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'wd' name=ID '{'
		//    (need+=Need)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'wd'
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(need+=Need)*
		public Assignment getNeedAssignment_3() { return cNeedAssignment_3; }
		
		//Need
		public RuleCall getNeedNeedParserRuleCall_3_0() { return cNeedNeedParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cElementsProcessElementCrossReference_2_1_0 = (CrossReference)cElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cElementsProcessElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cElementsProcessElementCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cElementsProcessElementCrossReference_2_2_1_0 = (CrossReference)cElementsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cElementsProcessElementIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cElementsProcessElementCrossReference_2_2_1_0.eContents().get(1);
		
		//Guidance: 'note' text=STRING ('for' elements+=[ProcessElement] ( "," elements+=[ProcessElement])* )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' text=STRING ('for' elements+=[ProcessElement] ( "," elements+=[ProcessElement])* )?
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
		
		//('for' elements+=[ProcessElement] ( "," elements+=[ProcessElement])* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'for'
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//elements+=[ProcessElement]
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//[ProcessElement]
		public CrossReference getElementsProcessElementCrossReference_2_1_0() { return cElementsProcessElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getElementsProcessElementIDTerminalRuleCall_2_1_0_1() { return cElementsProcessElementIDTerminalRuleCall_2_1_0_1; }
		
		//( "," elements+=[ProcessElement])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//elements+=[ProcessElement]
		public Assignment getElementsAssignment_2_2_1() { return cElementsAssignment_2_2_1; }
		
		//[ProcessElement]
		public CrossReference getElementsProcessElementCrossReference_2_2_1_0() { return cElementsProcessElementCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getElementsProcessElementIDTerminalRuleCall_2_2_1_0_1() { return cElementsProcessElementIDTerminalRuleCall_2_2_1_0_1; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		//WorkSequence : 'ws'
		//    linkType=WorkSequenceType
		//    'from' predecessor=[WorkDefinition]
		//    'to' successor=[WorkDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//'ws'
		//   linkType=WorkSequenceType
		//   'from' predecessor=[WorkDefinition]
		//   'to' successor=[WorkDefinition]
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//predecessor=[WorkDefinition]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }
		
		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//successor=[WorkDefinition]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }
		
		//[WorkDefinition]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }
		
		//ID
		public RuleCall getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1() { return cSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1; }
	}
	public class NeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Need");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbResourcesINTTerminalRuleCall_1_0 = (RuleCall)cNbResourcesAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cResourceResourceCrossReference_3_0 = (CrossReference)cResourceAssignment_3.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_3_0_1 = (RuleCall)cResourceResourceCrossReference_3_0.eContents().get(1);
		
		//Need : 'need' nbResources=INT 'of' resource=[Resource];
		@Override public ParserRule getRule() { return rule; }
		
		//'need' nbResources=INT 'of' resource=[Resource]
		public Group getGroup() { return cGroup; }
		
		//'need'
		public Keyword getNeedKeyword_0() { return cNeedKeyword_0; }
		
		//nbResources=INT
		public Assignment getNbResourcesAssignment_1() { return cNbResourcesAssignment_1; }
		
		//INT
		public RuleCall getNbResourcesINTTerminalRuleCall_1_0() { return cNbResourcesINTTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_3() { return cResourceAssignment_3; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_3_0() { return cResourceResourceCrossReference_3_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_3_0_1() { return cResourceResourceIDTerminalRuleCall_3_0_1; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNbAvailableResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNbAvailableResourcesINTTerminalRuleCall_1_0 = (RuleCall)cNbAvailableResourcesAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Resource : 'create' nbAvailableResources=INT 'of' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' nbAvailableResources=INT 'of' name=ID
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//nbAvailableResources=INT
		public Assignment getNbAvailableResourcesAssignment_1() { return cNbAvailableResourcesAssignment_1; }
		
		//INT
		public RuleCall getNbAvailableResourcesINTTerminalRuleCall_1_0() { return cNbAvailableResourcesINTTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	
	public class WorkSequenceTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartStartToStartKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartFinishToStartKeyword_1_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishStartToFinishKeyword_2_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishFinishToFinishKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum WorkSequenceType : startToStart = 'startToStart'
		//    | finishToStart = 'finishToStart'
		//    | startToFinish = 'startToFinish'
		//    | finishToFinish = 'finishToFinish';
		public EnumRule getRule() { return rule; }
		
		//startToStart = 'startToStart'
		//   | finishToStart = 'finishToStart'
		//   | startToFinish = 'startToFinish'
		//   | finishToFinish = 'finishToFinish'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart = 'startToStart'
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }
		
		//'startToStart'
		public Keyword getStartToStartStartToStartKeyword_0_0() { return cStartToStartStartToStartKeyword_0_0; }
		
		//finishToStart = 'finishToStart'
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_1() { return cFinishToStartEnumLiteralDeclaration_1; }
		
		//'finishToStart'
		public Keyword getFinishToStartFinishToStartKeyword_1_0() { return cFinishToStartFinishToStartKeyword_1_0; }
		
		//startToFinish = 'startToFinish'
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_2() { return cStartToFinishEnumLiteralDeclaration_2; }
		
		//'startToFinish'
		public Keyword getStartToFinishStartToFinishKeyword_2_0() { return cStartToFinishStartToFinishKeyword_2_0; }
		
		//finishToFinish = 'finishToFinish'
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }
		
		//'finishToFinish'
		public Keyword getFinishToFinishFinishToFinishKeyword_3_0() { return cFinishToFinishFinishToFinishKeyword_3_0; }
	}
	
	private final ProcessElements pProcess;
	private final ProcessElementElements pProcessElement;
	private final WorkSequenceTypeElements eWorkSequenceType;
	private final WorkDefinitionElements pWorkDefinition;
	private final GuidanceElements pGuidance;
	private final WorkSequenceElements pWorkSequence;
	private final NeedElements pNeed;
	private final ResourceElements pResource;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.pProcessElement = new ProcessElementElements();
		this.eWorkSequenceType = new WorkSequenceTypeElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pGuidance = new GuidanceElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pNeed = new NeedElements();
		this.pResource = new ResourceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.simplepdl.txt.PDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process : 'process' name=ID '{'
	//    processElements+=ProcessElement*
	//'}' ;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessElement : WorkDefinition | WorkSequence | Guidance | Resource;
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//enum WorkSequenceType : startToStart = 'startToStart'
	//    | finishToStart = 'finishToStart'
	//    | startToFinish = 'startToFinish'
	//    | finishToFinish = 'finishToFinish';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return eWorkSequenceType;
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//WorkDefinition : 'wd' name=ID '{'
	//    (need+=Need)*
	//'}';
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	//Guidance: 'note' text=STRING ('for' elements+=[ProcessElement] ( "," elements+=[ProcessElement])* )?;
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//WorkSequence : 'ws'
	//    linkType=WorkSequenceType
	//    'from' predecessor=[WorkDefinition]
	//    'to' successor=[WorkDefinition];
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//Need : 'need' nbResources=INT 'of' resource=[Resource];
	public NeedElements getNeedAccess() {
		return pNeed;
	}
	
	public ParserRule getNeedRule() {
		return getNeedAccess().getRule();
	}
	
	//Resource : 'create' nbAvailableResources=INT 'of' name=ID;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
